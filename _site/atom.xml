<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/my-blog/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/my-blog/" rel="alternate" type="text/html" /><updated>2020-07-05T12:14:13-07:00</updated><id>http://localhost:4000/my-blog/atom.xml</id><title type="html">Solidified Ray</title><subtitle>A blog powered by jekyll</subtitle><author><name>Solidified Ray</name></author><entry><title type="html">Hello, World!</title><link href="http://localhost:4000/my-blog/misc/2020/07/01/Hello,-World/" rel="alternate" type="text/html" title="Hello, World!" /><published>2020-07-01T00:00:00-07:00</published><updated>2020-07-01T00:00:00-07:00</updated><id>http://localhost:4000/my-blog/misc/2020/07/01/Hello,%20World</id><content type="html" xml:base="http://localhost:4000/my-blog/misc/2020/07/01/Hello,-World/">&lt;p&gt;The beginning of my journey&lt;/p&gt;</content><author><name>Solidified Ray</name></author><summary type="html">The beginning of my journey</summary></entry><entry><title type="html">The Brain—is wider than the Sky—</title><link href="http://localhost:4000/my-blog/misc/2020/07/01/The-Brain-is-wider-than-the-Sky/" rel="alternate" type="text/html" title="The Brain—is wider than the Sky—" /><published>2020-07-01T00:00:00-07:00</published><updated>2020-07-01T00:00:00-07:00</updated><id>http://localhost:4000/my-blog/misc/2020/07/01/The-Brain-is-wider-than-the-Sky</id><content type="html" xml:base="http://localhost:4000/my-blog/misc/2020/07/01/The-Brain-is-wider-than-the-Sky/">&lt;p&gt;前段时间玩素晴日发现的一首的诗&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Brain—is wider than the Sky—&lt;br /&gt;
For—put them side by side—&lt;br /&gt;
The one the other will contain&lt;br /&gt;
With ease—and you—beside—&lt;/p&gt;

  &lt;p&gt;The Brain is deeper than the sea—&lt;br /&gt;
For—hold them—Blue to Blue—&lt;br /&gt;
The one the other will absorb—&lt;br /&gt;
As sponges—Buckets—do—&lt;/p&gt;

  &lt;p&gt;The Brain is just the weight of God—&lt;br /&gt;
For—Heft them—Pound for Pound—&lt;br /&gt;
And they will differ—if they do—&lt;br /&gt;
As Syllable from Sound—&lt;/p&gt;

  &lt;p&gt;Emily Dickinson, c. 1862&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然想自己翻译一下，但始终没达到理想的效果，就用了游戏内的汉化&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们的脑袋比这片天空更加广阔&lt;br /&gt;
来，你来试试看……&lt;br /&gt;
天空被嗖嗖地吸进脑袋里了…… &lt;br /&gt;
然后……连你也吸了进来……&lt;/p&gt;

  &lt;p&gt;我们的脑袋比海还要深……&lt;br /&gt;
来，将两份蔚蓝重合起来……&lt;br /&gt;
大海便被嗖嗖地吸进了脑袋里……&lt;br /&gt;
就像是海绵吸水一样……&lt;/p&gt;

  &lt;p&gt;我们的脑袋和上帝一样重&lt;br /&gt;
来，正确地测测看……&lt;br /&gt;
要说有什么不同，那就是……&lt;br /&gt;
话语和声音的不同&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;素晴日让我惊讶的地方还有偏在转生这个概念——“世界只需要一个灵魂”&lt;br /&gt;
没想到以前的脑洞已经被别人提出来了，似乎是一个日本东大教授在他书中提到的 &lt;br /&gt;
当时思考死亡的时候，想到转生这个概念，然后突发奇想，如果转生不受时间约束，是否可能转生到过去？&lt;br /&gt;
如果这个前提成立的话，那同一个时间不是可能会出现两个“我”？ 如果这么无限轮回下去，同个时间可能出现三个“我”，四个“我”… 甚至全世界都是“我”的转生。&lt;br /&gt;
这样的话，世界只需要一个灵魂。&lt;/p&gt;</content><author><name>Solidified Ray</name></author><category term="Games" /><summary type="html">前段时间玩素晴日发现的一首的诗</summary></entry><entry><title type="html">Introduction to in-toto</title><link href="http://localhost:4000/my-blog/projects/2020/07/01/in-toto-summary/" rel="alternate" type="text/html" title="Introduction to in-toto" /><published>2020-07-01T00:00:00-07:00</published><updated>2020-07-01T00:00:00-07:00</updated><id>http://localhost:4000/my-blog/projects/2020/07/01/in-toto-summary</id><content type="html" xml:base="http://localhost:4000/my-blog/projects/2020/07/01/in-toto-summary/">&lt;p&gt;This is a short abstract of &lt;a href=&quot;https://in-toto.io/&quot;&gt;in-toto&lt;/a&gt;, a framework to secure the integrity of software supply chains. It is a project from &lt;a href=&quot;https://ssl.engineering.nyu.edu/&quot;&gt;Secure System Lab&lt;/a&gt; and I start participate in it since June 2020.&lt;/p&gt;

&lt;p&gt;First, what is a software supply chains and why is it important?&lt;br /&gt;
&lt;img src=&quot;https://ssl.engineering.nyu.edu/img/projects/in-toto_diagram.png&quot; alt=&quot;software supply chain&quot; /&gt;
The software supply chain is a series of steps to make software can run in the end-users system. It may include steps such as test, build, and package. It is important because if someone compromise the supply chain, attacker can hide and distribute malware to a significant number of users, given the app’s popularity. Microsoft has a well explained short video about supply chain attack, you can view it &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/supply-chain-malware&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then how can we protect the software supply chain? Citing from Microsoft’s document above, one approach is to “deploy strong code integrity policies to allow only authorized apps to run.” The role of in-toto is similar to this. In-toto secures the software supply chain by specifying information of each step and who is authorized to perform each step.&lt;/p&gt;

&lt;p&gt;I will use in-toto &lt;a href=&quot;https://github.com/in-toto/demo&quot;&gt;demo&lt;/a&gt; to help understand how in-toto works. In this demo, we need to perform all steps of a simple software supply chain: Alice is the &lt;strong&gt;owner&lt;/strong&gt; of this project, Bob is the developer, and Carl packages the software. Bob and Carl can also be called as project &lt;strong&gt;functionaries&lt;/strong&gt;, who will carry out the steps of the supply chain.&lt;/p&gt;

&lt;p&gt;First, Alice needs to create a &lt;strong&gt;supply chain layout&lt;/strong&gt;. &lt;strong&gt;Supply chain layout&lt;/strong&gt; is a signed file that includes the details and requirements of each step. It also includes a list of the &lt;strong&gt;functionaries&lt;/strong&gt; who are in charge of carrying out each step. For this demo, it will include Bob’s and Carl’s public key. The layout of this demo will include the following data:&lt;/p&gt;

&lt;p&gt;The layout file will be signed with owner’s private key. In this demo, it is Alice’s private key.&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;json&quot;&gt;
		&quot;signatures&quot;: [
			{
				&quot;keyid&quot;: &quot;556caebdc0877eed53d419b60eddb1e57fa773e4e31d70698b588f3e9cc48b35&quot;,
				&quot;sig&quot;: &quot;ad773a4d62d8e42cc3f6e6053089cd702d6928c9972f0b3d41f373bca5fe6971c5a1ed120256d37b06bbb60e4557a1b052fe5f81409881b51a8b4c663413d056101e14ae9f81e0a9ef8490f2c2be4f1aa55701de855120c5874a16ff36852e0d8b02fb07708620360f45353e4e1f5c14ac24e13d14ac8e41eb9519a4bcc33ee4405980f98bb30de0d726e114079277db3716790b1a099e20a323b7f66aafe306adbf208439860404759378906b2ee03ea95ae99ff677759b4f7b6822811185f1ea6931bcbf26638d2b86c26a40d4a076ddff0ddf1380302a254e24581e94873518d7cb529d505b6abc385f8991988d852095fe74331855ef584b7e06897e83d1740a580d8d3da66a8d97e9f6067a8172cf00b06d916104f59db059b5b10f319089b198ce6c7e7922509505c0808fafd7e635210b9b36be7acbf34a8f310947db332a7e1258313a1bfd38634c269667b4a0d216a463200a088ec2eda24fa2c34d44b22df1882c3ba3832519e27d77e815cf74075d1742731519b4acb866dbbde2&quot;
			}
		]
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The format of the layout will look like this:&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;json&quot;&gt;
		{ 
			&quot;_type&quot; : &quot;layout&quot;,
			&quot;expires&quot; : &quot;&amp;lt;EXPIRES&amp;gt;&quot;,
			&quot;readme&quot;: &quot;&amp;lt;README&amp;gt;&quot;,
			&quot;keys&quot; : {
				&quot;&amp;lt;KEYID&amp;gt;&quot; : &quot;&amp;lt;PUBKEY_OBJECT&amp;gt;&quot;
			},
			&quot;steps&quot; : [
				&quot;&amp;lt;STEP&amp;gt;&quot;,
				&quot;...&quot;
			],
			&quot;inspect&quot; : [
				&quot;&amp;lt;INSPECTION&amp;gt;&quot;,
				&quot;...&quot;
			]
		}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The “&lt;strong&gt;expires&lt;/strong&gt;” section will specify the expiration date, and in default it will be one month after the layout is created. The “&lt;strong&gt;steps&lt;/strong&gt;”” section contain a list of restrictions for each steps. The “&lt;strong&gt;inspect&lt;/strong&gt;” section also contain a list of restrictions for each step within the link, but it will be used in the final verification by the client.  The “&lt;strong&gt;keys&lt;/strong&gt;” section contain a list of public keys. In this demo, it will contains Bob’s and Carl’s public keys.&lt;/p&gt;

&lt;p&gt;To keep this blog short, I will only show the detail of &lt;strong&gt;steps&lt;/strong&gt;. The &lt;strong&gt;inspect&lt;/strong&gt; section is somehow similar to the &lt;strong&gt;step&lt;/strong&gt; section. You can view the difference in in-toto &lt;a href=&quot;https://github.com/in-toto/docs/blob/master/in-toto-spec.md#432-inspections&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this demo, Bob will clone foo.py from GitHub and update its version number.&lt;br /&gt;
In the layout file, Alice will specify the “clone” step as the following:&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;json&quot;&gt;
		{
			&quot;_type&quot;: &quot;step&quot;,
			&quot;expected_command&quot;: [
				&quot;git&quot;,
				&quot;clone&quot;,
				&quot;https://github.com/in-toto/demo-project.git&quot;
			],
			&quot;expected_materials&quot;: [],
			&quot;expected_products&quot;: [
				[
					&quot;CREATE&quot;,
					&quot;demo-project/foo.py&quot;
				],
				[
					&quot;DISALLOW&quot;,
					&quot;*&quot;
				]
			],
			&quot;name&quot;: &quot;clone&quot;,
			&quot;pubkeys&quot;: [
				&quot;776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b08453f5&quot;
			],
			&quot;threshold&quot;: 1
		}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The “&lt;strong&gt;epxected_command&lt;/strong&gt;” field include the command that Bob will run to clone the code from GitHub. The “&lt;strong&gt;expected_materials&lt;/strong&gt;” and “&lt;strong&gt;expected_products&lt;/strong&gt;” fields contain a list of &lt;a href=&quot;https://github.com/in-toto/docs/blob/master/in-toto-spec.md#433-artifact-rules&quot;&gt;ARTIFACT_RULES&lt;/a&gt; to ensure that materials and products are not changed. Since Bob has nothing before he clone the code, there will be no &lt;strong&gt;materials&lt;/strong&gt;. After cloning the code, Bob will create “foo.py” locally as &lt;strong&gt;product&lt;/strong&gt;. The “&lt;strong&gt;name&lt;/strong&gt;” field is just the name of this step. The “&lt;strong&gt;pubkeys&lt;/strong&gt;” section includes Bob’s public key. The “&lt;strong&gt;thresehold&lt;/strong&gt;” field contains an integer specifying how many links are needed to verify this step.&lt;/p&gt;

&lt;p&gt;After Bob clone the code, a link file will be created:&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;json&quot;&gt;
	{
		&quot;signatures&quot;: [
			{
			&quot;keyid&quot;: &quot;776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b08453f5&quot;,
			&quot;sig&quot;: &quot;a520c8cd74ab156d4bd1f1b9b12dd4d06d9c80cc10e2a82f7b0f3a08f62365d8133a6cc991df150912f6da790eec6d71573cbc613bf6b359d25806bccd2c50c78c198fc1b11f86bc261841e938ce8ca733247949dc2e9924181b8d21b1d36f4e58720c95de831ab7c88e1b637a9d7170e7e53f4188bad6370a8eb1a50dc6e6fab519dd29b1d45cbe71a5207906fa44b8b856a773b317921fa6967a8deb4b1732a6c9e93d73e87578277cdc7abe2c619cc1128c459e794bc4bedf8385c62b86f99c7320e913a6b290e7404e24ead2053046ca103e01b29970f9623e8959b1deca0acc897799d15cfaca689621cd30fde5bdbcf191ab48bea7dd9b4d8d9b8b81324a6f0456ba7343b5ae729cdca8c9c278a367465358741098aa67f13a148ca56f8456d8403b35640e2c829797c2f1f1e49e5a9d5881f465728949fbd24c110532056ec1c75fddd13304f76334d3551ba03feba926f94ae7c41ad50080a710a0fce703c5f6aeaa5a0b503b8235de80f8f3cc648880fc103b87bd73483d1891580f&quot;
			}
		],
		&quot;signed&quot;: {
			&quot;_type&quot;: &quot;link&quot;,
			&quot;byproducts&quot;: {
			&quot;return-value&quot;: 0,
			&quot;stderr&quot;: &quot;&quot;,
			&quot;stdout&quot;: &quot;&quot;
			},
			&quot;command&quot;: [
				&quot;git&quot;,
				&quot;clone&quot;,
				&quot;https://github.com/in-toto/demo-project.git&quot;
			],
			&quot;environment&quot;: {},
			&quot;materials&quot;: {},
			&quot;name&quot;: &quot;clone&quot;,
			&quot;products&quot;: {
				&quot;demo-project/foo.py&quot;: {
				&quot;sha256&quot;: &quot;ebebf8778035e0e842a4f1aeb92a601be8ea8e621195f3b972316c60c9e12235&quot;
				}
			}
		}
	}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;This link file will be singed with Bob’s private keys. It also includes the name of the step, the products, the materials, Bob’s command for cloning the code, and Bob’s public key.&lt;/p&gt;

&lt;p&gt;After all the steps are carried out, the client will have the layout file and all the link files. Then the client can use these files to verify any unexpected changes in the supply chain.&lt;/p&gt;

&lt;p&gt;This is just a very rough illustration of how in-toto works, and I have to admit that I am not a good writer. I may come back to revise this blog sometime later. You can also check the full, well-explained document of in-toto &lt;a href=&quot;https://github.com/in-toto/docs/blob/master/in-toto-spec.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Solidified Ray</name></author><category term="in-toto" /><category term="Security" /><category term="Python" /><summary type="html">This is a short abstract of in-toto, a framework to secure the integrity of software supply chains. It is a project from Secure System Lab and I start participate in it since June 2020.</summary></entry></feed>